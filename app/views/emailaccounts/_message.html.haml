- b = improved_message_body(message)
- id = message[:date].downcase.gsub(' ','').gsub(',','_').gsub(':','_')
.message{id: "message_#{id}"}
  %a.list-group-item.list-group-item-action.flex-column.align-items-start{onclick: "$(this).parent().find('.email_content').toggle();", style: "#{message[:unread] ? '' : 'background-color:#e0e0e0;'}"}
    .d-flex.w-100.justify-content-between
      %h5.mb-2{style: 'color: #8c8b8b'}= message[:from]
      %small{style: 'color: #8c8b8b'}= message[:date]
    %h4.mb-1{style: 'color: #8c8b8b'}= message[:subject]
  .email_content.list-group-item.mb-3{style: 'display: none;'}
    - unless b.nil?
      - sug = Reply.suggest_keywords(b)
      - @has_keywords = true unless sug.empty?
      %p.mb-2.pb-3.email_body
        - body = b.join(' ')
        - for reply in sug
          - exc = ["span", "class", "onclick", "click"]
          - key = exc.include?(reply) ? "#{reply} " : reply
          - body.gsub!(key, "<span class='potential_keyword suggested_#{reply}' onclick='select_keyword(this, \"#{reply}\",\"message_#{id}\");'>#{reply}</span> ")
        =  body.html_safe
        - b[0..20].join(' ')
      %p.mb-1.pot_keywords
        %strong Potential keywords:
        - for reply in sug
          %span{:class => "potential_keyword suggested_#{reply}", :onclick => "select_keyword(this, \"#{reply}\",\"message_"+id+"\");"}
            = reply
      - (r = @emailaccount.replies.select{|reply|(!(reply.keywords.split(',') & sug).empty?) rescue nil})
      .reply_box{style: (r.empty? ? 'display: none;' : '')}
        - if (!r.empty?)
          = render partial: 'replies/new', locals: {reply: r.first}
        - else
          = render partial: 'replies/new', locals: {reply: Reply.new(emailaccount_id: @emailaccount.id)}
